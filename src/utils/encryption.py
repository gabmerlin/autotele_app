"""
Module de chiffrement pour les sessions Telegram.

S√âCURIT√â : Ce module chiffre les fichiers de session Telegram pour prot√©ger
les credentials des comptes en cas de vol du disque ou d'acc√®s non autoris√©.

Algorithme : AES-256 via Fernet (cryptography)
D√©rivation de cl√© : PBKDF2-HMAC-SHA256 avec 100,000 it√©rations
"""
import os
import base64
from pathlib import Path
from typing import Optional, Tuple
from cryptography.fernet import Fernet, InvalidToken
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

from utils.logger import get_logger

logger = get_logger()


class SessionEncryption:
    """G√®re le chiffrement et d√©chiffrement des sessions Telegram."""
    
    # Nombre d'it√©rations pour PBKDF2 (100k = bon compromis s√©curit√©/performance)
    ITERATIONS = 100_000
    
    # Chemin du fichier de salt (unique par installation)
    SALT_FILE = Path("config/.encryption_salt")
    
    def __init__(self, encryption_key: Optional[str] = None):
        """
        Initialise le syst√®me de chiffrement.
        
        Args:
            encryption_key: Cl√© de chiffrement (depuis .env)
                           Si None, essaie de charger depuis l'environnement
        
        Raises:
            ValueError: Si la cl√© de chiffrement n'est pas d√©finie
        """
        if encryption_key is None:
            encryption_key = os.getenv('AUTOTELE_ENCRYPTION_KEY')
        
        if not encryption_key:
            raise ValueError(
                "ERREUR: Cl√© de chiffrement non d√©finie.\n"
                "Ajoutez AUTOTELE_ENCRYPTION_KEY dans votre fichier .env\n"
                "G√©n√©rez-en une avec : python -c \"import secrets; print(secrets.token_urlsafe(32))\""
            )
        
        self.encryption_key = encryption_key
        
        # R√©cup√©rer ou cr√©er un salt unique pour cette installation
        self.salt = self._get_or_create_salt()
        
        self._fernet = self._derive_fernet_key(encryption_key)
    
    def _get_or_create_salt(self) -> bytes:
        """
        R√©cup√®re ou cr√©e un salt unique pour cette installation.
        
        S√âCURIT√â: Le salt est g√©n√©r√© al√©atoirement une seule fois et stock√©
        de mani√®re s√©curis√©e. Cela √©vite les attaques par rainbow tables.
        
        Returns:
            bytes: Salt de 32 bytes
        """
        try:
            # V√©rifier si le salt existe d√©j√†
            if self.SALT_FILE.exists():
                with open(self.SALT_FILE, 'rb') as f:
                    salt = f.read()
                
                # Valider la longueur
                if len(salt) == 32:
                    logger.debug("Salt de chiffrement charg√© depuis le fichier")
                    return salt
                else:
                    logger.warning(f"Salt corrompu (longueur: {len(salt)}), r√©g√©n√©ration...")
            
            # G√©n√©rer un nouveau salt al√©atoire (cryptographiquement s√©curis√©)
            import secrets
            new_salt = secrets.token_bytes(32)
            
            # Cr√©er le r√©pertoire si n√©cessaire
            self.SALT_FILE.parent.mkdir(parents=True, exist_ok=True)
            
            # Stocker le salt
            with open(self.SALT_FILE, 'wb') as f:
                f.write(new_salt)
            
            # Permissions restrictives (Windows et Unix)
            try:
                from utils.file_permissions import FilePermissions
                success, msg = FilePermissions.set_secure_file_permissions(self.SALT_FILE)
                if success:
                    logger.debug(f"Permissions salt s√©curis√©es: {msg}")
                else:
                    logger.warning(f"Permissions salt non appliqu√©es: {msg}")
            except Exception as perm_error:
                logger.warning(f"Impossible de d√©finir les permissions du salt: {perm_error}")
            
            logger.info("üîë Nouveau salt de chiffrement g√©n√©r√© et sauvegard√©")
            return new_salt
            
        except Exception as e:
            logger.error(f"Erreur lors de la gestion du salt: {e}")
            # Fallback: g√©n√©rer un salt temporaire (moins s√©curis√©)
            logger.warning("ATTENTION: Utilisation d'un salt temporaire (non persistant)")
            import secrets
            return secrets.token_bytes(32)
    
    def _derive_fernet_key(self, password: str) -> Fernet:
        """
        D√©rive une cl√© Fernet depuis un mot de passe avec PBKDF2.
        
        Args:
            password: Mot de passe/cl√© de chiffrement
            
        Returns:
            Fernet: Instance Fernet avec la cl√© d√©riv√©e
        """
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,  # 256 bits
            salt=self.salt,  # Utilise le salt unique
            iterations=self.ITERATIONS
        )
        
        # D√©river la cl√© depuis le mot de passe
        key = base64.urlsafe_b64encode(kdf.derive(password.encode('utf-8')))
        
        return Fernet(key)
    
    def encrypt_session_file(self, session_path: Path) -> Tuple[bool, str]:
        """
        Chiffre un fichier de session Telegram.
        
        Args:
            session_path: Chemin vers le fichier .session
            
        Returns:
            Tuple[bool, str]: (succ√®s, message)
        """
        try:
            if not session_path.exists():
                return False, f"Fichier introuvable: {session_path}"
            
            # Lire le fichier non chiffr√©
            with open(session_path, 'rb') as f:
                plaintext = f.read()
            
            if len(plaintext) == 0:
                return False, "Fichier vide"
            
            # Chiffrer
            encrypted = self._fernet.encrypt(plaintext)
            
            # Sauvegarder avec extension .enc (SANS .session √† la fin)
            base_name = str(session_path).replace('.session', '')
            encrypted_path = Path(f"{base_name}.enc")
            
            with open(encrypted_path, 'wb') as f:
                f.write(encrypted)
            
            # Supprimer l'original non chiffr√©
            session_path.unlink()
            
            return True, f"Session chiffr√©e: {encrypted_path.name}"
            
        except Exception as e:
            logger.error(f"Erreur chiffrement {session_path.name}: {e}")
            return False, str(e)
    
    def decrypt_session_file(self, encrypted_path: Path, output_path: Optional[Path] = None) -> Tuple[bool, str, Optional[Path]]:
        """
        D√©chiffre un fichier de session Telegram.
        
        Args:
            encrypted_path: Chemin vers le fichier .session.enc
            output_path: Chemin de sortie (optionnel, par d√©faut = .session)
            
        Returns:
            Tuple[bool, str, Optional[Path]]: (succ√®s, message, chemin_d√©chiffr√©)
        """
        try:
            if not encrypted_path.exists():
                return False, f"Fichier chiffr√© introuvable: {encrypted_path}", None
            
            # Lire le fichier chiffr√©
            with open(encrypted_path, 'rb') as f:
                encrypted = f.read()
            
            # D√©chiffrer
            try:
                plaintext = self._fernet.decrypt(encrypted)
            except InvalidToken:
                return False, "Cl√© de chiffrement invalide ou fichier corrompu", None
            
            # D√©terminer le chemin de sortie
            if output_path is None:
                # Retirer .enc pour obtenir .session
                output_path = encrypted_path.with_suffix('')
                if output_path.suffix != '.session':
                    output_path = output_path.with_suffix('.session')
            
            # Sauvegarder le fichier d√©chiffr√©
            with open(output_path, 'wb') as f:
                f.write(plaintext)
            
            logger.debug(f"Session d√©chiffr√©e: {encrypted_path.name} -> {output_path.name}")
            return True, "Session d√©chiffr√©e", output_path
            
        except Exception as e:
            logger.error(f"Erreur d√©chiffrement {encrypted_path.name}: {e}")
            return False, str(e), None
    
    def is_encrypted(self, path: Path) -> bool:
        """
        V√©rifie si un fichier de session est chiffr√©.
        
        Args:
            path: Chemin du fichier
            
        Returns:
            bool: True si le fichier est chiffr√©
        """
        path_str = str(path)
        return (path.suffix == '.enc' or 
                path_str.endswith('.session.enc') or 
                path_str.endswith('.enc.session'))
    
    def get_encrypted_path(self, session_path: Path) -> Path:
        """
        Retourne le chemin du fichier chiffr√© correspondant.
        
        Args:
            session_path: Chemin du fichier .session
            
        Returns:
            Path: Chemin du fichier .enc (SANS .session √† la fin)
        """
        # Retirer l'extension .session et ajouter .enc
        base_name = str(session_path).replace('.session', '')
        return Path(f"{base_name}.enc")
    
    def get_decrypted_path(self, encrypted_path: Path) -> Path:
        """
        Retourne le chemin du fichier d√©chiffr√© correspondant.
        
        Args:
            encrypted_path: Chemin du fichier .enc
            
        Returns:
            Path: Chemin du fichier .session
        """
        # Retirer .enc et ajouter .session
        base_name = str(encrypted_path).replace('.enc', '')
        return Path(f"{base_name}.session")


def generate_encryption_key() -> str:
    """
    G√©n√®re une cl√© de chiffrement al√©atoire s√©curis√©e.
    
    Returns:
        str: Cl√© de chiffrement en base64url
    """
    import secrets
    return secrets.token_urlsafe(32)


# Instance globale (lazy loading)
_encryption_instance: Optional[SessionEncryption] = None


def get_encryption() -> SessionEncryption:
    """
    R√©cup√®re l'instance globale du syst√®me de chiffrement.
    
    Returns:
        SessionEncryption: Instance du syst√®me de chiffrement
        
    Raises:
        ValueError: Si la cl√© de chiffrement n'est pas configur√©e
    """
    global _encryption_instance
    
    if _encryption_instance is None:
        _encryption_instance = SessionEncryption()
    
    return _encryption_instance

